<?php

/**
 * Implements hook_form_alter().
 */
function ems_custom_form_alter(&$form, &$form_state, $form_id) {
  $form['commerce_payment']['payment_method']['#options']['payment_commerce_2|commerce_payment_payment_commerce_2'] = t('Invoice By Company');
  if ($form_id == 'webform_client_form_4') {
    $form['basket_description'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="basket-description">' . t('Please have your credit card details available for the next stage') . '</div>',
      '#weight' => 2000,
    );
  }
 // leaving here to debug for form_id.
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ems_custom_form_commerce_checkout_form_checkout_alter(&$form, &$form_state, $form_id) {
  $form['buttons']['continue']['#weight'] = 1000;
  $form['buttons']['back']['#weight'] = -1000;
  $form['buttons']['cancel']['#weight'] = -1000;
}

function ems_custom_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  $form['buttons']['continue']['#weight'] = 1000;
  $form['buttons']['back']['#weight'] = -1000;
  $form['buttons']['cancel']['#weight'] = -1000;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ems_custom_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id) {

  foreach ($form['edit_quantity'] as $id => $cart_line_item) {
    if (is_array($cart_line_item)) {
      $line_item = commerce_line_item_load($cart_line_item['#line_item_id']);
      if ($line_item->type == 'product_discount') {
        $form['edit_quantity'][$id]['#access'] = FALSE;
        $form['edit_delete'][$id]['#access'] = FALSE;
      }
    }
  }

  // There will be no need to update the cart, so lets hide it.
  $form['actions']['submit']['#access'] = FALSE;

  foreach (element_children($form['edit_delete']) as $id) {
    if (!empty($form['edit_delete'][$id]['#line_item_id'])) {
      $line_item_id = $form['edit_delete'][$id]['#line_item_id'];
      $line_item = commerce_line_item_load($line_item_id);
      if ($line_item->type == 'commerce_webform') {
        unset($form['edit_delete'][$id]['#submit'][0]);
        $form['edit_delete'][$id]['#suffix'] = '';
      }
    }
  }
}

/**
 * Implements hook_commerce_cart_order_refresh().
 *
 * @see hook_commerce_cart_order_refresh();
 */
function ems_custom_commerce_cart_order_refresh($order_wrapper) {
  $line_items = $order_wrapper->commerce_line_items->value();

  $workshop_term_object = taxonomy_get_term_by_name('Workshop product', 'product_flag');
  $workshop_term_tid = array_shift($workshop_term_object)->tid;

  $industrial = 0;
  $academic = 0;

  $discount_price = 0;

  if (!empty($line_items)) {

    foreach ($line_items as $id => $line_item) {

      // if there is a 'workshop product' discount in the cart, lets remove it,
      // make the calculations again to see if the current cart is eligible for
      // this discount
      if ($line_item->type == 'product_discount' && $line_item->line_item_label == 'workshop-discount') {
        commerce_line_item_delete($line_item->line_item_id);
      }

      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

      $product = $line_item_wrapper->__isset('commerce_product');
      if ($product) {
        $product_entity = $line_item_wrapper->commerce_product->value();

        $product_type = field_get_items('commerce_product', $product_entity, 'field_product_type');

        if (!empty($product_type)) {
          $workshop_type = field_get_items('commerce_product', $product_entity, 'field_workshop_type');
          // If the currently loaded workshop TID =='s what is currently on the product
          // workshop, then lets begin sorting out the organisation types.
          if ($workshop_term_tid == $product_type[0]['tid']) {
            $workshop_value = strtolower($workshop_type[0]['value']);
            switch ($workshop_value) {
              case 'industrial':
                $industrial++;
                break;
              case 'academic':
                $academic++;
                break;
            }
          }
        }
      }
    }

    $workshop_types_count = [
      'industrial' => $industrial,
      'academic' => $academic,
    ];

    $discount_for = '';
    foreach ($workshop_types_count as $key => $count) {
      if ($count == 2) {
        $discount_for = $key;
      }
    }

    switch ($discount_for) {
      case 'industrial':
        $discount_price = -7000;
        break;
      case 'academic':
        $discount_price = -3500;
        break;
    }

    // if $discount_for is not blank then it means we've got a cart thats eligible
    // so lets create the discount line item, or else we have to make sure we dont
    // create a line item with price of 0;

    if ($discount_for != "") {
      $discount_line_item = commerce_line_item_new('product_discount', $order_wrapper->getIdentifier());
      $discount_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $discount_line_item);

      $workshop_discount_product = commerce_product_load_by_sku('workshop-discount-product');

      $discount_line_item_wrapper->line_item_label = t('workshop-discount');
      $discount_line_item_wrapper->quantity = 1;
      $discount_line_item_wrapper->commerce_product = $workshop_discount_product->product_id;
      $discount_line_item_wrapper->commerce_unit_price->amount = $discount_price;
      $discount_line_item_wrapper->commerce_unit_price->currency_code = 'GBP';
      $discount_line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
        $discount_line_item_wrapper->commerce_unit_price->value(),
        'base_price',
        $discount_line_item_wrapper->commerce_unit_price->value(),
        TRUE,
        FALSE
      );

      commerce_line_item_save($discount_line_item);
      $order_wrapper->commerce_line_items[] = $discount_line_item;
      $order_wrapper->save();
    }
  }
}