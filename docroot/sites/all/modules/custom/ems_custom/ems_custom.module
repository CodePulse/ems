<?php

/**
 * Implements hook_menu().
 */
function ems_custom_menu() {
  $items['admin/config/resend-review-email'] = array(
    'title' => 'Review email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ems_custom_resend_review_email'),
    'access arguments' => array('access content'),
    'file' => 'ems_custom.pages.inc',
  );

  return $items;
}
/**
 * Implements hook_form_alter().
 */
function ems_custom_form_alter(&$form, &$form_state, $form_id) {
  $form['commerce_payment']['payment_method']['#options']['payment_commerce_2|commerce_payment_payment_commerce_2'] = t('Invoice my company');
  if ($form_id == 'webform_client_form_4') {
    $form['basket_description'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="basket-description">' . t('Please have your credit card details available for the next stage') . '</div>',
      '#weight' => 2000,
    );
  }
  // leaving here to debug for form_id.
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ems_custom_form_commerce_checkout_form_checkout_alter(&$form, &$form_state, $form_id) {
  $form['buttons']['continue']['#weight'] = 1000;
  $form['buttons']['back']['#weight'] = -1000;
  $form['buttons']['cancel']['#weight'] = -1000;

  $form['customer_profile_billing']['commerce_customer_address']['und'][0]['locality_block']['locality']['#title'] = t('City');

  $form['commerce_coupon']['coupon_code']['#description'] = '';
//  unset($form['commerce_coupon']['coupon_add']['#ajax']);
}

function ems_custom_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  $form['#theme'][] = 'ems_custom_checkout_review_form';
  $form['buttons']['continue']['#weight'] = 1000;
  $form['buttons']['back']['#weight'] = -1000;
  $form['buttons']['cancel']['#weight'] = -1000;
  $form['commerce_payment']['payment_details']['paypal_wps_information']['#markup'] = '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ems_custom_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id) {

  foreach ($form['edit_quantity'] as $id => $cart_line_item) {
    if (is_array($cart_line_item)) {
      $line_item = commerce_line_item_load($cart_line_item['#line_item_id']);
      if ($line_item->type == 'product_discount') {
        $form['edit_quantity'][$id]['#access'] = FALSE;
        $form['edit_delete'][$id]['#access'] = FALSE;
      }
    }
  }

  // There will be no need to update the cart, so lets hide it.
  $form['actions']['submit']['#access'] = FALSE;

  foreach (element_children($form['edit_delete']) as $id) {
    if (!empty($form['edit_delete'][$id]['#line_item_id'])) {
      $line_item_id = $form['edit_delete'][$id]['#line_item_id'];
      $line_item = commerce_line_item_load($line_item_id);
      if ($line_item->type == 'commerce_webform') {
        unset($form['edit_delete'][$id]['#submit'][0]);
        $form['edit_delete'][$id]['#suffix'] = '';
      }
    }
  }

  $form['actions']['go_back'] = array(
    '#type' => 'markup',
    '#attributes' => array(
      'classes' => array(
        'previous',
        'back-to-form'
      )),
    '#markup' => '<button class="previous back-to-form">Go Back</button>',
  );
}

/**
 * Implements hook_commerce_cart_order_refresh().
 *
 * @see hook_commerce_cart_order_refresh();
 */
function ems_custom_commerce_cart_order_refresh($order_wrapper) {
  $line_items = $order_wrapper->commerce_line_items->value();
  foreach ($line_items as $id => $line_item) {
    $sku = $line_item->line_item_label;
    if (strpos($sku, 'no_workshop') !== false) {
      commerce_line_item_delete($line_item->line_item_id);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ems_custom_form_webform_results_download_form_alter(&$form, &$form_state, $form_id) {
  $form['select_options']['select_format']['#default_value'] = 'compact';
  for ($i = 0; $i <= 9; $i++) {
    unset($form['components']['#default_value'][$i]);
  }
}

/**
 * @see hook_commerce_payment_order_paid_in_full().
 */
function ems_custom_commerce_payment_order_paid_in_full($order, $transaction) {
  if ($transaction->payment_method == 'payment_commerce_2') {
    $order = commerce_order_status_update($order, 'checkout_complete');
    commerce_checkout_complete($order);
  }
}
function _ems_send_notification_emails($order){

}
/**
 * Implements hook_commerce_checkout_complete().
 */
function ems_custom_commerce_checkout_complete($order) {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $line_items = $order_wrapper->commerce_line_items->value();

    $sid = 0;
    foreach ($line_items as $line_item) {
      if ($webform_submission = commerce_webform_get_webform_submission_from_lineitem($line_item)) {
        $sid = $webform_submission->sid;
      }
    }
    if ($sid != 0) {

      module_load_include('inc', 'webform', 'includes/webform.submissions');
      $webform = webform_get_submissions(array('sid' => $sid));

      $nid = $webform[$sid]->nid;
      $web_submission = webform_get_submission($nid, $sid);

      $node = node_load($nid);
      $output = webform_submission_render($node, $web_submission, NULL, 'html');

      $name = $output['attendee_set']['full_name']['#value'];

      $params = array(
        'webform' => drupal_render($output),
        'order_id' => $order->order_id,
        'name' => $name
      );

      drupal_mail('ems_custom', 'order_confirmation', $order->mail, language_default(), $params);
      drupal_mail('ems_custom', 'order_notification', 'pse_marketing@psenterprise.com', language_default(), $params);
    }


}

/**
 * Implements hook_commerce_order_presave().
 */
function ems_custom_commerce_order_presave($order) {
}
/**
 * Implements hook_mail().
 */
function ems_custom_mail($key, &$message, $params) {
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
  switch ($key) {
    case 'order_confirmation':
      $message['subject'] = 'Advanced Process Modelling Forum, London, 25-26 April 2017';
      $message['body'][] = theme('ems_custom_order_confirmation', $params);
      break;
    case 'order_notification':
      $message['subject'] = 'APM Forum registration';
      $message['body'][] = theme('ems_custom_order_notification', $params);
      break;
  }
}

/**
 * Implements hook_theme().
 */
function ems_custom_theme($existing, $type, $theme, $path) {
  return array(
    'ems_custom_order_confirmation' => array(
      'variables' => array(
        'email_content' => NULL,
      ),
      'template' => 'templates/order-confirmation'
    ),
    'ems_custom_order_notification' => array(
      'variables' => array(
        'email_content' => NULL,
      ),
      'template' => 'templates/order-notification-pse'
    ),
  );
}
function ems_custom_commerce_checkout_page_info_alter(&$checkout_pages) {
  $checkout_pages['review']['help'] = t('<h2>Review your order</h2>');
}

function ems_custom_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $entity);
  $line_items = $order_wrapper->commerce_line_items->value();
  $line_items_total = commerce_line_items_total($line_items);
  $subtotal_excl_vat = $line_items_total['amount'] - $components['tax|vat']['price']['amount'];
//  $components['base_price']['price']['amount'] = $subtotal_excl_vat;
}

function ems_custom_commerce_price_component_type_info_alter(&$component_types) {
  $component_types['base_price']['weight'] = -100;
  $component_types['discount']['weight'] = 90;
  $component_types['tax|vat']['weight'] = 1000;
}

function ems_custom_inline_conditions_info() {
  // Products and quantity: line item
  $conditions['commerce_discount_line_item_has_attributes_quantity'] = array(
    'label' => t('Product has quantity of attributes'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'ems_custom_line_item_has_specific_quantity_attributes_configure',
      'build' => 'ems_custom_line_item_has_specific_quantity_attributes_build',
    ),
  );
  return $conditions;
}

function ems_custom_line_item_has_specific_quantity_attributes_configure($settings){
  $form = array();
  $form['operator'] = array(
    '#type' => 'select',
    '#title' => t('Operator'),
    '#title_display' => 'invisible',
    '#options' => array(
      '==' => t('quantity equals'),
    ),
    '#default_value' => !empty($settings['operator']) ? $settings['operator'] : '==',
  );

  $form['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#title_display' => 'invisible',
    '#default_value' => !empty($settings['quantity']) ? $settings['quantity'] : '',
    '#size' => 5,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer'),
    '#suffix' => '<div class="condition-instructions">' . t("The discount is active if the order's product(s) match the condition above.") . '</div>',
  );

  return $form;
}

function ems_custom_line_item_has_specific_quantity_attributes_build($line_item_wrapper, $products, $operator, $quantity) {
//  $products_sku = explode(', ', (string) $products);
//
//  // specified in the rule settings.
//  $attribute = array();
//  foreach ($line_item_wrapper->order->commerce_line_items as $wrapper_line_item) {
//    $product = $wrapper_line_item->commerce_product->value();
//    $sku = $wrapper_line_item->commerce_product->sku->value();
//    // At this point, we are sure that the current product is in the order.
//    // If this product line item doesn't meet the quantity comparison, the
//    // condition will return false.
//    switch ($operator) {
//      case '==':
//        if ($wrapper_line_item->quantity->value() == $quantity) {
//          unset($products_sku[$sku]);
//        }
//        else {
//          return FALSE;
//        }
//        break;
//    }
//  }
//  return empty($products_sku);

}