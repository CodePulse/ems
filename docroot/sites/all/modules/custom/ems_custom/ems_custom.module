<?php

/**
 * Implements hook_form_alter().
 */
function ems_custom_form_alter(&$form, &$form_state, $form_id) {
  $form['commerce_payment']['payment_method']['#options']['payment_commerce_2|commerce_payment_payment_commerce_2'] = t('Invoice my company');
  if ($form_id == 'webform_client_form_4') {
    $form['basket_description'] = array(
      '#type' => 'markup',
      '#markup' => '<div class="basket-description">' . t('Please have your credit card details available for the next stage') . '</div>',
      '#weight' => 2000,
    );
  }
  // leaving here to debug for form_id.
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ems_custom_form_commerce_checkout_form_checkout_alter(&$form, &$form_state, $form_id) {
  $form['buttons']['continue']['#weight'] = 1000;
  $form['buttons']['back']['#weight'] = -1000;
  $form['buttons']['cancel']['#weight'] = -1000;

  $form['customer_profile_billing']['commerce_customer_address']['und'][0]['locality_block']['locality']['#title'] = t('City');

  $form['commerce_coupon']['coupon_code']['#description'] = '';
//  unset($form['commerce_coupon']['coupon_add']['#ajax']);
}

function ems_custom_form_commerce_checkout_form_review_alter(&$form, &$form_state, $form_id) {
  $form['#theme'][] = 'ems_custom_checkout_review_form';
  $form['buttons']['continue']['#weight'] = 1000;
  $form['buttons']['back']['#weight'] = -1000;
  $form['buttons']['cancel']['#weight'] = -1000;
  $form['commerce_payment']['payment_details']['paypal_wps_information']['#markup'] = '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ems_custom_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state, $form_id) {

  foreach ($form['edit_quantity'] as $id => $cart_line_item) {
    if (is_array($cart_line_item)) {
      $line_item = commerce_line_item_load($cart_line_item['#line_item_id']);
      if ($line_item->type == 'product_discount') {
        $form['edit_quantity'][$id]['#access'] = FALSE;
        $form['edit_delete'][$id]['#access'] = FALSE;
      }
    }
  }

  // There will be no need to update the cart, so lets hide it.
  $form['actions']['submit']['#access'] = FALSE;

  foreach (element_children($form['edit_delete']) as $id) {
    if (!empty($form['edit_delete'][$id]['#line_item_id'])) {
      $line_item_id = $form['edit_delete'][$id]['#line_item_id'];
      $line_item = commerce_line_item_load($line_item_id);
      if ($line_item->type == 'commerce_webform') {
        unset($form['edit_delete'][$id]['#submit'][0]);
        $form['edit_delete'][$id]['#suffix'] = '';
      }
    }
  }
}

/**
 * Implements hook_commerce_cart_order_refresh().
 *
 * @see hook_commerce_cart_order_refresh();
 */
function ems_custom_commerce_cart_order_refresh($order_wrapper) {
//  $line_items = $order_wrapper->commerce_line_items->value();
//
//  $workshop_term_object = taxonomy_get_term_by_name('Workshop product', 'product_flag');
//  $workshop_term_tid = array_shift($workshop_term_object)->tid;
//
//  $industrial = 0;
//  $academic = 0;
//
//  $discount_price = 0;
//
//  if (!empty($line_items)) {
//
//    foreach ($line_items as $id => $line_item) {
//
//      // if there is a 'workshop product' discount in the cart, lets remove it,
//      // make the calculations again to see if the current cart is eligible for
//      // this discount
//      if ($line_item->type == 'product_discount' && $line_item->line_item_label == 'workshop-discount') {
//        commerce_line_item_delete($line_item->line_item_id);
//      }
//
//      $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
//
//      $product = $line_item_wrapper->__isset('commerce_product');
//      if ($product) {
//        $product_entity = $line_item_wrapper->commerce_product->value();
//
//        $product_type = field_get_items('commerce_product', $product_entity, 'field_product_type');
//
//        if (!empty($product_type)) {
//          $workshop_type = field_get_items('commerce_product', $product_entity, 'field_workshop_type');
//          // If the currently loaded workshop TID =='s what is currently on the product
//          // workshop, then lets begin sorting out the organisation types.
//          if ($workshop_term_tid == $product_type[0]['tid']) {
//            $workshop_value = strtolower($workshop_type[0]['value']);
//            switch ($workshop_value) {
//              case 'industrial':
//                $industrial++;
//                break;
//              case 'academic':
//                $academic++;
//                break;
//            }
//          }
//        }
//      }
//    }
//
//    $workshop_types_count = [
//      'industrial' => $industrial,
//      'academic' => $academic,
//    ];
//
//    $discount_for = '';
//    foreach ($workshop_types_count as $key => $count) {
//      if ($count == 2) {
//        $discount_for = $key;
//      }
//    }
//
//    switch ($discount_for) {
//      case 'industrial':
//        $discount_price = -7000;
//        break;
//      case 'academic':
//        $discount_price = -3500;
//        break;
//    }
//
//    // if $discount_for is not blank then it means we've got a cart thats eligible
//    // so lets create the discount line item, or else we have to make sure we dont
//    // create a line item with price of 0;
//
//    if ($discount_for != "") {
//      $discount_line_item = commerce_line_item_new('product_discount', $order_wrapper->getIdentifier());
//      $discount_line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $discount_line_item);
//
//      $workshop_discount_product = commerce_product_load_by_sku('workshop-discount-product');
//
//      $discount_line_item_wrapper->line_item_label = t('workshop-discount');
//      $discount_line_item_wrapper->quantity = 1;
//      $discount_line_item_wrapper->commerce_product = $workshop_discount_product->product_id;
//      $discount_line_item_wrapper->commerce_unit_price->amount = $discount_price;
//      $discount_line_item_wrapper->commerce_unit_price->currency_code = 'GBP';
//      $discount_line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
//        $discount_line_item_wrapper->commerce_unit_price->value(),
//        'base_price',
//        $discount_line_item_wrapper->commerce_unit_price->value(),
//        TRUE,
//        FALSE
//      );
//
//      commerce_line_item_save($discount_line_item);
//      $order_wrapper->commerce_line_items[] = $discount_line_item;
//      $order_wrapper->save();
//    }
//  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ems_custom_form_webform_results_download_form_alter(&$form, &$form_state, $form_id) {
  $form['select_options']['select_format']['#default_value'] = 'compact';
  for ($i = 0; $i <= 9; $i++) {
    unset($form['components']['#default_value'][$i]);
  }
}

//todo send email to user after submitting checkout
///**
// * Implements hook_commerce_order_presave().
// */
//function zsl_custom_commerce_checkout_complete($order) {
//  $params = _zsl_custom_order_details(array($order));
//  $params['current_order']->order_number = commerce_billy_invoice_nr_infinite();
//
//  drupal_mail('zsl_custom', 'order_confirmation', $order->mail, language_default(), $params);
//}

function ems_custom_commerce_checkout_page_info_alter(&$checkout_pages) {
  $checkout_pages['review']['help'] = t('<h2>Review your order</h2>');
}

function ems_custom_commerce_price_formatted_components_alter(&$components, $price, $entity) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $entity);
  $line_items = $order_wrapper->commerce_line_items->value();
  $line_items_total = commerce_line_items_total($line_items);
  $subtotal_excl_vat = $line_items_total['amount'] - $components['tax|vat']['price']['amount'];
//  $components['base_price']['price']['amount'] = $subtotal_excl_vat;
}

function ems_custom_commerce_price_component_type_info_alter(&$component_types) {
  $component_types['base_price']['weight'] = -100;
  $component_types['discount']['weight'] = 90;
  $component_types['tax|vat']['weight'] = 1000;
}

function ems_custom_inline_conditions_info() {
  // Products and quantity: line item
  $conditions['commerce_discount_line_item_has_attributes_quantity'] = array(
    'label' => t('Product has quantity of attributes'),
    'entity type' => 'commerce_line_item',
    'callbacks' => array(
      'configure' => 'ems_custom_line_item_has_specific_quantity_attributes_configure',
      'build' => 'ems_custom_line_item_has_specific_quantity_attributes_build',
    ),
  );
  return $conditions;
}

function ems_custom_line_item_has_specific_quantity_attributes_configure($settings){
  $form = array();
  $form['operator'] = array(
    '#type' => 'select',
    '#title' => t('Operator'),
    '#title_display' => 'invisible',
    '#options' => array(
      '==' => t('quantity equals'),
    ),
    '#default_value' => !empty($settings['operator']) ? $settings['operator'] : '==',
  );

  $form['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#title_display' => 'invisible',
    '#default_value' => !empty($settings['quantity']) ? $settings['quantity'] : '',
    '#size' => 5,
    '#required' => TRUE,
    '#element_validate' => array('element_validate_integer'),
    '#suffix' => '<div class="condition-instructions">' . t("The discount is active if the order's product(s) match the condition above.") . '</div>',
  );

  return $form;
}

function ems_custom_line_item_has_specific_quantity_attributes_build($line_item_wrapper, $products, $operator, $quantity) {
//  $products_sku = explode(', ', (string) $products);
//
//  // specified in the rule settings.
//  $attribute = array();
//  foreach ($line_item_wrapper->order->commerce_line_items as $wrapper_line_item) {
//    $product = $wrapper_line_item->commerce_product->value();
//    $sku = $wrapper_line_item->commerce_product->sku->value();
//    // At this point, we are sure that the current product is in the order.
//    // If this product line item doesn't meet the quantity comparison, the
//    // condition will return false.
//    switch ($operator) {
//      case '==':
//        if ($wrapper_line_item->quantity->value() == $quantity) {
//          unset($products_sku[$sku]);
//        }
//        else {
//          return FALSE;
//        }
//        break;
//    }
//  }
//  return empty($products_sku);

}